{"version":3,"sources":["context/promptContext.js","components/OptionForms/SectionsForm/index.js","components/OptionForms/SectionsForm/SectionsForm.js","components/PromptOutput/index.js","components/PromptOutput/PromptOutput.js","App.js","index.js"],"names":["PromptContext","createContext","usePrompt","useContext","PromptProvider","props","useState","user","setUser","host","setHost","path","setPath","branch","setBranch","userColor","setUserColor","hostColor","setHostColor","pathColor","setPathColor","branchColor","setBranchColor","Provider","value","colors","black","blue","cyan","green","purple","red","white","yellow","children","SectionsForm","colorKeys","Object","keys","toggle","state","stateSetter","htmlFor","type","name","checked","onChange","e","target","map","color","PromptOutput","userPrompt","setUserPrompt","hostPrompt","setHostPrompt","pathPrompt","setPathPrompt","branchPrompt","setBranchPrompt","useEffect","userPromptInfo","hostPromptInfo","pathPromptInfo","branchPromptInfo","App","className","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50dd5c67.chunk.js","sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\nexport const PromptContext = createContext();\n\nexport const usePrompt = () => useContext(PromptContext);\n\nexport const PromptProvider = (props) => {\n  const [user, setUser] = useState(1);\n  const [host, setHost] = useState(1);\n  const [path, setPath] = useState(\"full\");\n  const [branch, setBranch] = useState(1);\n  const [userColor, setUserColor] = useState(\"white\");\n  const [hostColor, setHostColor] = useState(\"white\");\n  const [pathColor, setPathColor] = useState(\"white\");\n  const [branchColor, setBranchColor] = useState(\"white\");\n\n  const colors = {\n    black: `\\\\[\\\\e[30m\\\\]`,\n    blue: `\\\\[\\\\e[34m\\\\]`,\n    cyan: `\\\\[\\\\e[36m\\\\]`,\n    green: `\\\\[\\\\e[32m\\\\]`,\n    purple: `\\\\[\\\\e[35m\\\\]`,\n    red: `\\\\[\\\\e[31m\\\\]`,\n    white: `\\\\[\\\\e[37m\\\\]`,\n    yellow: `\\\\[\\\\e[33m\\\\]`,\n  };\n\n  return (\n    <PromptContext.Provider\n      value={{\n        colors,\n        user,\n        setUser,\n        host,\n        setHost,\n        path,\n        setPath,\n        branch,\n        setBranch,\n        userColor,\n        setUserColor,\n        hostColor,\n        setHostColor,\n        pathColor,\n        setPathColor,\n        branchColor,\n        setBranchColor,\n      }}\n    >\n      {props.children}\n    </PromptContext.Provider>\n  );\n};\n","import SectionsForm from \"./SectionsForm\";\nexport default SectionsForm;\n","import { usePrompt } from \"../../../context/promptContext\";\n\nconst SectionsForm = () => {\n  const {\n    colors,\n    user,\n    setUser,\n    host,\n    setHost,\n    path,\n    setPath,\n    branch,\n    setBranch,\n    userColor,\n    setUserColor,\n    hostColor,\n    setHostColor,\n    pathColor,\n    setPathColor,\n    branchColor,\n    setBranchColor,\n  } = usePrompt();\n\n  const colorKeys = Object.keys(colors);\n\n  const toggle = (state, stateSetter) => {\n    state === 1 ? stateSetter(-1) : stateSetter(1);\n  };\n\n  return (\n    <div>\n      <p>Sections Form</p>\n      <div>\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          type=\"checkbox\"\n          name=\"username\"\n          checked={user === 1}\n          onChange={() => toggle(user, setUser)}\n        />\n        {user === 1 && (\n          <select\n            onChange={(e) => setUserColor(e.target.value)}\n            value={userColor}\n          >\n            {colorKeys.map((color) => (\n              <option value={color} key={color}>\n                {color}\n              </option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor=\"hostname\">Hostname:</label>\n        <input\n          type=\"checkbox\"\n          name=\"hostname\"\n          checked={host === 1}\n          onChange={() => toggle(host, setHost)}\n        />\n        {host === 1 && (\n          <select\n            onChange={(e) => setHostColor(e.target.value)}\n            value={hostColor}\n          >\n            {colorKeys.map((color) => (\n              <option value={color} key={color}>\n                {color}\n              </option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor=\"git-branch\">Display Git Branch</label>\n        <input\n          type=\"checkbox\"\n          name=\"git-branch\"\n          checked={branch === 1}\n          onChange={() => toggle(branch, setBranch)}\n        />\n        {branch === 1 && (\n          <select\n            onChange={(e) => setBranchColor(e.target.value)}\n            value={branchColor}\n          >\n            {colorKeys.map((color) => (\n              <option value={color} key={color}>\n                {color}\n              </option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      <div>\n        <p>Full or partial path</p>\n\n        <label htmlFor=\"full\">Full:</label>\n        <input\n          type=\"radio\"\n          value=\"full\"\n          name=\"path\"\n          checked={path === \"full\"}\n          onChange={(e) => setPath(e.target.value)}\n        />\n\n        <label htmlFor=\"partial\">Partial:</label>\n        <input\n          type=\"radio\"\n          value=\"partial\"\n          name=\"path\"\n          checked={path === \"partial\"}\n          onChange={(e) => setPath(e.target.value)}\n        />\n        <select\n          onChange={(e) => setPathColor(e.target.value)}\n          value={pathColor}\n        >\n          {colorKeys.map((color) => (\n            <option value={color} key={color}>\n              {color}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <button>Next</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SectionsForm;\n","import PromptOutput from './PromptOutput';\n\nexport default PromptOutput;\n","import { usePrompt } from \"../../context/promptContext\";\nimport { useEffect, useState } from \"react\";\n\nconst PromptOutput = () => {\n  const {\n    colors,\n    user,\n    host,\n    path,\n    branch,\n    userColor,\n    hostColor,\n    pathColor,\n    branchColor,\n  } = usePrompt();\n\n  const [userPrompt, setUserPrompt] = useState(null);\n  const [hostPrompt, setHostPrompt] = useState(null);\n  const [pathPrompt, setPathPrompt] = useState(null);\n  const [branchPrompt, setBranchPrompt] = useState(null);\n\n  useEffect(() => {\n    let userPromptInfo = user === 1 ? \"\\\\u\" : \"\";\n    if (userPromptInfo !== \"\") {\n      setUserPrompt(colors[userColor] + userPromptInfo);\n    } else {\n      setUserPrompt(userPromptInfo);\n    }\n  }, [user, userColor, colors]);\n\n  useEffect(() => {\n    let hostPromptInfo = host === 1 ? \"@\\\\H\" : \"\";\n    if (hostPromptInfo !== \"\") {\n      setHostPrompt(colors[hostColor] + hostPromptInfo);\n    } else {\n      setHostPrompt(hostPromptInfo);\n    }\n  }, [host, colors, hostColor]);\n\n  useEffect(() => {\n    let pathPromptInfo = path === \"full\" ? \"\\\\w \" : \"~/\\\\W \";\n    setPathPrompt(colors[pathColor] + pathPromptInfo);\n  }, [path, pathColor, colors]);\n\n  useEffect(() => {\n    let branchPromptInfo = branch === 1 ? \"\\\\$(parse_git_branch)\" : \"\";\n    if (branchPromptInfo !== \"\") {\n      setBranchPrompt(colors[branchColor] + branchPromptInfo);\n    } else {\n      setBranchPrompt(branchPromptInfo);\n    }\n  }, [branch, colors, branchColor]);\n\n  return (\n    <div>\n      {branch === 1 && (\n        <pre>\n          <code>\n            {`function parse_git_branch {\n    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\\\(.*\\\\)/(\\\\1)/'\n}`}\n          </code>\n        </pre>\n      )}\n      <p>{`export PS1=\"${userPrompt}${hostPrompt} ${pathPrompt} ${branchPrompt}\"`}</p>\n    </div>\n  );\n};\n\nexport default PromptOutput;\n","import { SectionsForm, PromptOutput } from \"./components\";\n\nconst App = () => {\n  return (\n    <>\n      <h1>Make Your Prompt Awesome</h1>\n      <div className=\"form-sections\">\n        <SectionsForm />\n      </div>\n      <div>\n        <PromptOutput />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { PromptProvider } from \"./context/promptContext\";\n\nconst Root = () => {\n  return (\n    <PromptProvider>\n      <App />\n    </PromptProvider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}